{"version":3,"sources":["GlobalStyle.js","common/Header/styled.js","common/Header/Header.js"," features/tasks/Form/styled.js"," features/tasks/tasksSlice.js"," features/tasks/Form/Form.js","common/Section/styled.js","common/Section/Section.js","common/Container/styled.js"," features/tasks/Buttons/styled.js"," features/tasks/Buttons/Buttons.js"," features/tasks/TaskList/styled.js"," features/tasks/TaskList/TaskList.js"," features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Name","styled","h1","theme","color","black","white","Header","title","StyledForm","form","breakpoint","horizontal","Input","input","gray","Button","button","teal","lightTeal","tasksSlice","createSlice","name","initialState","tasks","reducers","addTask","payload","push","toggleHideDone","state","hideDone","toggleTaskDone","index","findIndex","id","done","setAllDone","removeTask","splice","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","current","focus","content","nanoid","value","onChange","target","placeholder","ref","StyledSection","section","StyledHeaderContainer","div","StyledTitle","h2","Section","body","extraHeaderContent","StyledContainer","main","StyledButtons","darkTeal","gallery","Buttons","useSelector","length","onClick","disabled","every","StyledTasks","ul","Item","li","lightGray","hidden","css","TasksButton","remove","red","toggleDone","green","Content","p","TaskList","map","task","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.8385c700.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n  box-sizing: border-box;\n\n}\n\n*, ::before, ::after {\n  box-sizing: inherit;\n}\n\nbody {\n    font-family: 'Montserrat', sans-serif;\n    background-color:#eee\n}\n\n`;","import styled from \"styled-components\";\n\nexport const Name = styled.h1`\n  color:${({theme}) =>theme.color.black};\n  margin-top: 2px;\n  margin-bottom: 2px;\n  padding: 20px;\n  background-color: ${({theme}) =>theme.color.white};\n`;\n","import React from \"react\";\nimport { Name } from \"./styled\";\n\nexport const Header = ({ title }) => {\n  return <Name>{title}</Name>;\n};\n","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: row;\n  background: ${({ theme }) => theme.color.white};\n  padding: 15px 15px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.horizontal}px) {\n    flex-direction: column;\n  }\n`;\n\nexport const Input = styled.input`\n  flex-grow: 0.8;\n  padding: 10px;\n  height: 40px;\n  margin-right: 10px;\n  border: 1px solid ${({ theme }) => theme.color.gray};\n  padding: 0px 10px;\n`;\n\nexport const Button = styled.button`\n  color: ${({ theme }) => theme.color.white};\n  border: 1px solid ${({ theme }) => theme.color.teal};\n  background: ${({ theme }) => theme.color.teal};\n  font-size: 18px;\n  flex-grow: 0.2;\n  transition: 2s, transform 1s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.lightTeal};\n    transform: scale(1.1);\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.horizontal}px) {\n    flex-basis: 100%;\n    margin: 20px 0;\n    padding: 10px;\n  }\n`;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: [],\n  },\n  reducers: {\n    addTask: ({ tasks }, { payload }) => {\n      tasks.push(payload);\n    },\n    toggleHideDone: (state) => {\n      state.hideDone = !state.hideDone;\n    },\n    toggleTaskDone: ({ tasks }, { payload }) => {\n      const index = tasks.findIndex(({ id }) => id === payload);\n      tasks[index].done = !tasks[index].done;\n    },\n    setAllDone: ({ tasks }) => {\n      for (const task of tasks) {\n        task.done = true;\n      }\n    },\n    removeTask: ({ tasks }, { payload }) => {\n      const index = tasks.findIndex(({ id }) => id === payload);\n      tasks.splice(index, 1);\n    },\n  },\n});\nexport const {\n  addTask,\n  toggleHideDone,\n  toggleTaskDone,\n  setAllDone,\n  removeTask,\n} = tasksSlice.actions;\nexport const selectTasks = (state) => state.tasks;\nexport default tasksSlice.reducer;\n","import React, { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { StyledForm, Button, Input } from \"./styled\";\nimport { addTask } from \"../tasksSlice\";\n\nexport const Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const inputRef = useRef(null);\n  const inputFocus = () => {\n    inputRef.current.focus();\n  };\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    if (newTaskContent.trim() === \"\") {\n      return;\n    }\n    setNewTaskContent(\"\");\n    inputFocus();\n    dispatch(\n      addTask({\n        content: newTaskContent.trim(),\n        done: false,\n        id: nanoid(),\n      })\n    );\n  };\n  return (\n    <StyledForm onSubmit={onFormSubmit}>\n      <Input\n        value={newTaskContent}\n        onChange={({ target }) => setNewTaskContent(target.value)}\n        placeholder=\"Co jest do zrobienia\"\n        ref={inputRef}\n      />\n      <Button>Dodaj zadanie</Button>\n    </StyledForm>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n  margin-bottom: 10px;\n`;\n\nexport const StyledHeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${({theme}) =>theme.color.white};\n  padding-right: 10px;\n  margin: 0 0 1px 0;\n\n  @media (max-width:  ${({theme}) =>theme.breakpoint.horizontal}px) {\n    flex-direction: column;\n  }\n`;\n\nexport const StyledTitle = styled.h2`\n  padding: 15px 17px;\n  font-size: 25px;\n  margin: 0px;\n`;\n","import React from \"react\";\nimport { StyledSection, StyledHeaderContainer, StyledTitle } from \"./styled\";\n\nexport const Section = ({ title, body, extraHeaderContent }) => {\n  return (\n    <StyledSection>\n      <StyledHeaderContainer>\n        <StyledTitle>{title}</StyledTitle>\n        {extraHeaderContent}\n      </StyledHeaderContainer>\n      {body}\n    </StyledSection>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.main`\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 30px;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledButtons = styled.div`\n  display: flex;\n  align-items: center;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.horizontal}px) {\n    flex-direction: column;\n  }\n`;\n\nexport const Button = styled.button`\n  color: teal;\n  font-size: 18px;\n  background-color: ${({ theme }) => theme.color.white};\n  border: none;\n  transition: 0.5s;\n\n  &:hover {\n    color: ${({ theme }) => theme.color.lightTeal};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.color.darkTeal};\n  }\n  &:disabled {\n    color: ${({ theme }) => theme.color.gallery};\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.horizontal}px) {\n    flex-basis: 100%;\n    margin: 10px 0;\n  }\n`;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\nimport { Button, StyledButtons } from \"./styled\";\n\nexport const Buttons = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <StyledButtons>\n      {tasks.length > 0 && (\n        <>\n          <Button onClick={() => dispatch(toggleHideDone())}>\n            {hideDone ? \"Pokaz\" : \"Ukryj\"} ukończone\n          </Button>\n          <Button\n            onClick={() => dispatch(setAllDone())}\n            disabled={tasks.every(({ done }) => done)}\n          >\n            Ukończ wszystkie\n          </Button>\n        </>\n      )}\n    </StyledButtons>\n  );\n};\n","import styled, { css } from \"styled-components\";\n\nexport const StyledTasks = styled.ul`\n  background-color: ${({ theme }) => theme.color.white};\n  padding: 15px;\n  list-style-type: none;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  margin: 12px;\n  padding-bottom: 10px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid ${({ theme }) => theme.color.lightGray};\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      display: none;\n    `}\n`;\n\nexport const TasksButton = styled.button`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  color: ${({ theme }) => theme.color.white};\n  border: none;\n  padding: 5px;\n  width: 28px;\n  height: 28px;\n  transition: 0.5s;\n\n  ${({ remove }) =>\n    remove &&\n    css`\n      background-color: ${({ theme }) => theme.color.red};\n    `}\n  ${({ toggleDone }) =>\n    toggleDone &&\n    css`\n      background-color: ${({ theme }) => theme.color.green};\n    `}\n`;\n\nexport const Content = styled.p`\n  margin: 0;\n  flex-basis: 100%;\n  padding: 0 15px;\n  word-break: break-word;\n\n  ${({ done }) =>\n    done &&\n    css`\n      text-decoration: line-through;\n    `}\n`;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { StyledTasks, TasksButton, Item, Content } from \"./styled\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\n\nexport const TaskList = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <StyledTasks>\n      {tasks.map((task) => (\n        <Item key={task.id} hidden={task.done && hideDone}>\n          <TasksButton\n            toggleDone\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n          >\n            {task.done ? \"✔️\" : \"\"}\n          </TasksButton>\n          <Content done={task.done}>{task.content}</Content>\n          <TasksButton remove onClick={() => dispatch(removeTask(task.id))}>\n            🗑\n          </TasksButton>\n        </Item>\n      ))}\n    </StyledTasks>\n  );\n};\n","import React from \"react\";\nimport { Header } from \"../../common/Header/Header\";\nimport { Form } from \"../tasks/Form/Form\";\nimport { Section } from \"../../common/Section/Section\";\nimport { StyledContainer } from \"../../common/Container/styled\";\nimport { Buttons } from \"../tasks/Buttons/Buttons\";\nimport { TaskList } from \"../tasks/TaskList/TaskList\";\n\nexport const Tasks = () => {\n  return (\n    <StyledContainer>\n      <Header title=\"Lista zadań\" />\n      <Section title=\"Dodaj nowe zadanie\" body={<Form />} />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons />}\n        body={<TaskList />}\n      />\n    </StyledContainer>\n  );\n};\n","import React from \"react\";\nimport { Tasks } from \"./ features/tasks/Tasks\";\n\n\nexport const App = () => <Tasks/>;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./ features/tasks/tasksSlice\";\n\nexport default configureStore({\n  reducer: {\n    tasks: tasksReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { App } from \"./App\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n  color: {\n    gallery: \"#ccc\",\n    lightGray: \"#ddd\",\n    lightTeal: \"hsl(180, 100%, 40%)\",\n    darkTeal: \"hsl(180, 100%, 15%)\",\n    teal: \"#008080\",\n    white: \"#fff\",\n    gray: \"#808080\",\n    black: \"#000\",\n    red: \"#FF0000\",\n    green: \"#0D9658\",\n  },\n  breakpoint: {\n    horizontal: 768,\n  },\n};\n"],"sourceRoot":""}