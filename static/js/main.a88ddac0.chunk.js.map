{"version":3,"sources":["GlobalStyle.js","Header/styled.js","Header/Header.js","Form/styled.js","Form/Form.js","Section/styled.js","Section/Section.js","Container/styled.js","Buttons/styled.js","Buttons/Buttons.js","Task/styled.js","Task/Tasks.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Name","styled","h1","Header","title","StyledForm","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","value","onChange","target","placeholder","ref","StyledSection","section","StyledHeaderContainer","div","StyledTitle","h2","Section","body","extraHeaderContent","StyledContainer","main","StyledButtons","Buttons","tasks","hideDone","toggleHideDone","setAllDone","length","onClick","disabled","every","done","StyledTasks","ul","Item","li","hidden","css","TasksButton","remove","toggleDone","Content","p","Tasks","toggleTaskDone","removeTask","map","task","id","content","App","setHideDone","setTasks","useEffect","localStorageTasks","JSON","parse","localStorage","getItem","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAEaA,EAAcC,YAAH,+M,sBCAXC,EAAOC,IAAOC,GAAV,qI,OCCJC,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACvB,OAAO,cAACJ,EAAD,UAAOI,KCFHC,EAAaJ,IAAOK,KAAV,sLAWVC,EAAQN,IAAOO,MAAV,0JASLC,EAASR,IAAOS,OAAV,2VCnBNC,EAAO,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACpB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAWC,iBAAO,MAcxB,OACE,eAACZ,EAAD,CAAYa,SAVO,SAACC,GACpBA,EAAMC,iBACwB,KAA1BN,EAAeO,SAGnBT,EAAWE,EAAeO,QAC1BN,EAAkB,IATlBC,EAASM,QAAQC,UAajB,UACE,cAAChB,EAAD,CACCiB,MAAOV,EACPW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAAkBW,EAAOF,QAClDG,YAAY,uBAA0BC,IAAKZ,IAE7C,cAACP,EAAD,gCCzBOoB,EAAgB5B,IAAO6B,QAAV,oDAIbC,EAAwB9B,IAAO+B,IAAV,iPAarBC,EAAchC,IAAOiC,GAAV,uFChBXC,EAAU,SAAC,GAAyC,IAAvC/B,EAAsC,EAAtCA,MAAOgC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,mBACrC,OACE,eAACR,EAAD,WACE,eAACE,EAAD,WACE,cAACE,EAAD,UAAc7B,IACbiC,KAEFD,MCRME,EAAkBrC,IAAOsC,KAAV,2FCAfC,EAAgBvC,IAAO+B,IAAV,yIASbvB,EAASR,IAAOS,OAAV,qWCRN+B,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,WAApC,OACrB,cAACL,EAAD,UACGE,EAAMI,OAAS,GACd,qCACE,eAAC,EAAD,CAAQC,QAASH,EAAjB,UAAkCD,EAAW,QAAU,QAAvD,qBACA,cAAC,EAAD,CAAQI,QAASF,EAAaG,SAAUN,EAAMO,OAAM,qBAAGC,QAAvD,yCCNKC,EAAclD,IAAOmD,GAAV,sIAQXC,EAAOpD,IAAOqD,GAAV,yJAMb,qBAAGC,QAEHC,YADM,yDAMGC,EAAcxD,IAAOS,OAAV,gPAYpB,qBAAGgD,QAEHF,YADM,iEAIN,qBAAGG,YAEHH,YADU,mEAODI,EAAU3D,IAAO4D,EAAV,uHAMhB,qBAAGX,MAEHM,YADI,yECrDKM,EAAQ,SAAC,GAAD,IAAGpB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUoB,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,WAApC,OACnB,cAACb,EAAD,UACGT,EAAMuB,KAAI,SAACC,GAAD,OACT,eAACb,EAAD,CAAoBE,OAAQW,EAAKhB,MAAQP,EAAzC,UACE,cAACc,EAAD,CAAaE,YAAU,EAACZ,QAAS,kBAAKgB,EAAeG,EAAKC,KAA1D,SAAgED,EAAKhB,KAAO,eAAO,KACnF,cAACU,EAAD,CAASV,KAAMgB,EAAKhB,KAApB,SAA2BgB,EAAKE,UAChC,cAACX,EAAD,CAAaC,QAAM,EAAEX,QAAS,kBAAIiB,EAAWE,EAAKC,KAAlD,4BAHSD,EAAKC,UCwFPE,MArFf,WACE,MAAgCxD,oBAAS,GAAzC,mBAAO8B,EAAP,KAAiB2B,EAAjB,KACA,EAA0BzD,mBAAS,IAAnC,mBAAO6B,EAAP,KAAc6B,EAAd,KAqDA,OAXAC,qBAAU,WACR,IAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,UAChC,OAAtBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUrC,MAC5C,CAACA,IAGF,eAACJ,EAAD,WACE,cAAC,EAAD,CAAQlC,MAAM,qBACd,cAAC,EAAD,CACEA,MAAM,qBACNgC,KAAM,cAAC,EAAD,CAAMxB,WA1BC,SAACwD,GAClBG,GAAS,SAAC7B,GAAD,4BACJA,GADI,CAEP,CACE0B,UACAlB,MAAM,EACNiB,GAAIzB,EAAMI,OAASJ,EAAMA,EAAMI,OAAS,GAAGqB,GAAK,EAAI,aAsBtD,cAAC,EAAD,CACE/D,MAAM,mBACNiC,mBACE,cAAC,EAAD,CACEK,MAAOA,EACPC,SAAUA,EACVC,eAhEa,WACrB0B,GAAY,SAAC3B,GAAD,OAAeA,MAgEnBE,WA3CS,WACjB0B,GAAS,SAAC7B,GAAD,OACPA,EAAMuB,KAAI,SAACC,GAAD,mBAAC,eACNA,GADK,IAERhB,MAAM,aA0CNd,KACE,cAAC,EAAD,CACEM,MAAOA,EACPC,SAAUA,EACVqB,WApES,SAACG,GAClBI,GAAS,SAAC7B,GAAD,OAAWA,EAAMsC,QAAO,SAACd,GAAD,OAAUA,EAAKC,KAAOA,SAoE/CJ,eAjEa,SAACI,GACtBI,GAAS,SAAC7B,GAAD,OACPA,EAAMuB,KAAI,SAACC,GACT,OAAIA,EAAKC,KAAOA,EACP,2BACFD,GADL,IAEEhB,MAAOgB,EAAKhB,OAGTgB,iBCjBAe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACA,cAAC9F,EAAD,IACE,cAAC,EAAD,OAEF+F,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a88ddac0.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n  box-sizing: border-box;\n\n}\n\n*, ::before, ::after {\n  box-sizing: inherit;\n}\n\nbody {\n    font-family: 'Montserrat', sans-serif;\n    background-color:#eee\n}\n\n`;","import styled from \"styled-components\";\n\nexport const Name = styled.h1`\n  color: black;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  padding: 20px;\n  background-color: #fff;\n`;","import React from \"react\";\nimport { Name } from \"./styled\";\n\nexport const Header = ({ title }) => {\n  return <Name>{title}</Name>;\n};","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: row;\n  background: white;\n  padding: 15px 15px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const Input = styled.input`\n  flex-grow: 0.8;\n  padding: 10px;\n  height: 40px;\n  margin-right: 10px;\n  border: 1px solid gray;\n  padding: 0px 10px;\n`;\n\nexport const Button = styled.button`\n  color: white;\n  border: 1px solid teal;\n  background: teal;\n  font-size: 18px;\n  flex-grow: 0.2;\n  transition: 2s, transform 1s;\n\n  &:hover {\n    background-color: #0c9696;\n    transform: scale(1.1);\n  }\n\n  @media (max-width: 768px) {\n    flex-basis: 100%;\n    margin: 20px 0;\n    padding: 10px;\n  }\n`;\n","import React, {useState, useRef} from \"react\";\nimport { StyledForm, Button, Input } from \"./styled\";\n\nexport const Form = ({addNewTask}) => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const inputRef = useRef(null);\n  const inputFocus = () => {\n    inputRef.current.focus();\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    if (newTaskContent.trim() === \"\") {\n      return;\n    }\n    addNewTask(newTaskContent.trim());\n    setNewTaskContent(\"\");\n    inputFocus();\n  };\n  return (\n    <StyledForm onSubmit={onFormSubmit}>\n      <Input\n       value={newTaskContent}\n       onChange={({ target }) => setNewTaskContent(target.value)}\n        placeholder=\"Co jest do zrobienia\"    ref={inputRef}\n      />\n      <Button>Dodaj zadanie</Button>\n    </StyledForm>\n  );\n};","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n  margin-bottom: 10px;\n`;\n\nexport const StyledHeaderContainer = styled.div`\n  display: flex;\n  justify-content:space-between;\n  align-items: center;\n  background-color: #fff;\n  padding-right: 10px;\n  margin: 0 0 1px 0;\n\n  @media(max-width:768px){\n    flex-direction: column;\n  }\n`;\n\nexport const StyledTitle = styled.h2`\n  padding: 15px 17px;\n  font-size: 25px;\n  margin: 0px;\n`;","import React from \"react\";\nimport { StyledSection, StyledHeaderContainer, StyledTitle } from \"./styled\";\n\nexport const Section = ({ title, body, extraHeaderContent }) => {\n  return (\n    <StyledSection>\n      <StyledHeaderContainer>\n        <StyledTitle>{title}</StyledTitle>\n        {extraHeaderContent}\n      </StyledHeaderContainer>\n      {body}\n    </StyledSection>\n  );\n};","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.main`\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 30px;\n  \n`;","import styled from \"styled-components\";\n\nexport const StyledButtons = styled.div`\n  display: flex;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const Button = styled.button`\n  color: teal;\n  font-size: 18px;\n  background-color: #fff;\n  border: none;\n  transition: 0.5s;\n\n  &:hover {\n    color: hsl(180, 100%, 40%);\n  }\n\n  &:active {\n    color: hsl(180, 100%, 15%);\n  }\n  &:disabled {\n    color: #ccc;\n  }\n\n  @media (max-width: 768px) {\n    flex-basis: 100%;\n    margin: 10px 0;\n  }\n`;\n","import React from \"react\";\nimport { Button, StyledButtons } from \"./styled\";\n\nexport const Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone}) => (\n  <StyledButtons>\n    {tasks.length > 0 && (\n      <>\n        <Button onClick={toggleHideDone}>{hideDone ? \"Pokaz\" : \"Ukryj\"} ukończone</Button>\n        <Button onClick={setAllDone}  disabled={tasks.every(({ done }) => done)}>\n          Ukończ wszystkie\n        </Button>\n      </>\n    )}\n  </StyledButtons>\n);","import styled, { css } from \"styled-components\";\n\nexport const StyledTasks = styled.ul`\n  background-color: #fff;\n  padding: 15px;\n  list-style-type: none;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n  margin: 12px;\n  padding-bottom: 10px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #ddd;\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      display: none;\n    `}\n`;\n\nexport const TasksButton = styled.button`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  color: #fff;\n  border: none;\n  padding: 5px;\n  width: 28px;\n  height: 28px;\n  transition: 0.5s;\n\n  ${({ remove }) =>\n    remove &&\n    css`\n      background-color: red;\n    `}\n  ${({ toggleDone }) =>\n    toggleDone &&\n    css`\n      background-color: green;\n    `\n  }\n`;\n\nexport const Content = styled.p`\n  margin: 0;\n  flex-basis: 100%;\n  padding: 0 15px;\n  word-break: break-word;\n\n  ${({ done }) =>\n    done &&\n    css`\n      text-decoration: line-through;\n    `}\n`;","import React from \"react\";\nimport { StyledTasks, TasksButton, Item, Content } from \"./styled\";\nexport const Tasks = ({ tasks, hideDone, toggleTaskDone, removeTask }) => (\n  <StyledTasks>\n    {tasks.map((task) => (\n      <Item key={task.id} hidden={task.done && hideDone}>\n        <TasksButton toggleDone onClick={()=> toggleTaskDone(task.id)}>{task.done ? \"✔️\" : \"\"}</TasksButton>\n        <Content done={task.done}>{task.content}</Content>\n        <TasksButton remove  onClick={()=>removeTask(task.id)} >🗑</TasksButton>\n      </Item>\n    ))}\n  </StyledTasks>\n);","import React, { useState, useEffect } from \"react\";\nimport { Header } from \"./Header/Header\";\nimport { Form } from \"./Form/Form\";\nimport { Section } from \"./Section/Section\";\nimport { StyledContainer } from \"./Container/styled\";\nimport { Buttons } from \"./Buttons/Buttons\";\nimport { Tasks } from \"./Task/Tasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    setHideDone((hideDone) => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks((tasks) =>\n      tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            done: !task.done,\n          };\n        }\n        return task;\n      })\n    );\n  };\n\n  const setAllDone = () => {\n    setTasks((tasks) =>\n      tasks.map((task) => ({\n        ...task,\n        done: true,\n      }))\n    );\n  };\n  const addNewTask = (content) => {\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n  useEffect(() => {\n    const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    if (localStorageTasks !== null) {\n      setTasks(localStorageTasks);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  return (\n    <StyledContainer>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n      />\n    </StyledContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <GlobalStyle/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}